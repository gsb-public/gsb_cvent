<?php

/**
 * @file
 * Contains hook implementations and helper functions for GSB Cvent
 */

/**
 * Implementation of hook_menu().
 */
function gsb_cvent_menu() {
  $items = array();
  $items['admin/config/gsb/cvent'] = array(
    'title' => 'GSB Cvent',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_cvent_settings_form'),
    'access arguments' => array('administer cvent'),
    'file' => 'gsb_cvent.admin.inc',
  );

  $items['admin/config/gsb/cvent/import'] = array(
    'title' => 'Start Import',
    'description' => 'GSB Cvent Import.',
    //'page callback' => 'gsb_cvent_all_events_import',
    'page callback' => 'gsb_cvent_batch_import',
    'access arguments' => array('administer cvent'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function gsb_cvent_permission() {
  return array(
    'administer cvent' => array(
      'title' => t('Administer cvent'),
    ),
  );
}

/**
 * The batch callback.
 */
function gsb_cvent_batch_import() {
  $batch = array(
    'operations' => array(),
    'finished' => 'gsb_cvent_batch_import_finished',
    'title' => t('Cvent Batch Import'),
    'init_message' => t('Import is starting...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Import has encountered an error.')
  );

  $batch['operations'][] = array('gsb_cvent_batch_all_events_import', array("Cvent"));

  batch_set($batch);
  batch_process('admin/content'); // The path to redirect to when done.
}

/**
 * The batch finish handler.
 */
function gsb_cvent_batch_import_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Cvent import is complete!');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Login to Cvent API.
 */
function gsb_cvent_login() {
  // Get the library info.
  $library_path = libraries_get_path('php-cvent') . '/CventClient.class.php';
  if (!file_exists($library_path)) {
    drupal_set_message('php-cvent: The CventClient library was not found.', 'error');
    return;
  }
  include_once($library_path);
  $accountnumber = variable_get('gsb_cvent_account_number', $default = NULL);
  $username = variable_get('gsb_cvent_user_name', $default = NULL);
  $password = variable_get('gsb_cvent_password', $default = NULL);
 
  $client = new CventClient();
  $client->Login($accountnumber, $username, $password);
  if (!$client->CventSessionHeader) {
    watchdog('gsb_cvent', 'Cvent API Login failed!');
  }
  return $client;
}

/* 
 * Search all events based on condition
 */
function  gsb_cvent_search_events_bycondition($client) {
  $response = $client->SearchByFilter('Event', 'AndSearch', array(
                (object) array('Field' => 'EventStatus', 'Operator' => 'Equals', 'Value' => 'Active'),
            ));
  if(isset($response->SearchResult->Id)) return $response->SearchResult->Id;
  return false;
}

/* 
 * Gets upcoming events
 */
function gsb_cvent_batch_all_events_import($options, &$context) {
  $client = gsb_cvent_login();

  //$event_ids = $client->GetUpcomingEvents();
  $event_type = array(
    'Alumni Briefing',
    'Class Visit',
    'Diversity Event',
    'Fair',
    'Information Session'
  );

  $limit = 10;
  if (!isset($context['sandbox']['progress'])) {
    $event_ids = gsb_cvent_search_events_bycondition($client);
    $event_chunks = array_chunk($event_ids, $limit);
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($event_ids);
    $context['sandbox']['event_ids'] = $event_chunks;
    $context['sandbox']['current_chunk'] = 0;
  }

  // Display a progress message...
  $current_chunk = $context['sandbox']['current_chunk'];

  foreach ($context['sandbox']['event_ids'][$current_chunk] as $event_id) {
    $event = $client->GetEventById($event_id);
    // check the event type matches
    $cvent_event_types = explode(', ', $event->CustomFieldDetail[11]->FieldValue);
    foreach ($cvent_event_types as $cvent_event_type) {
      if (in_array($cvent_event_type, $event_type)) {
        gsb_cvent_event_import($event);
        break;
      }
    }

    // Import all the sessions as event
    foreach ($event->ProductDetail as $session) {
      gsb_cvent_event_import($event, $session);
    }
    $context['sandbox']['progress']++;
  }

  $context['message'] = "Now processing " . $context['sandbox']['progress'] . " out of " . $context['sandbox']['max'] . "..";
  $context['sandbox']['current_chunk']++;

  if ($context['sandbox']['progress'] < $context['sandbox'] ['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Imports an Event
 */
function gsb_cvent_event_import($event, $session = NULL) {

  // Set the event id
  $event_id = (empty($session)) ? $event->Id : $session->ProductId;

  // Check if the event already exists
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'admission_event')
    ->fieldCondition('field_item_id', 'value', (string)$event_id);

  $entities = $query->execute();

  if (!empty($entities['node'])) {
    $nid = array_keys($entities['node']);
    $node = node_load(array_shift($nid));
  }
  else {
    $field_values = array(
      'type' => 'admission_event',
      'uid' => 1,
      'status' => 1,
      'promote' => 0,
    );
    // Create the admission event
    $node = entity_create('node', $field_values);
    node_save($node);
  }

  // Set the workbench access
  $node->workbench_access['access_scheme'] = 'taxonomy'; // or 'menu'
  $node->workbench_access = array(12401, 12396); // Set to MBA and Marketing
  workbench_access_node_insert($node);

  // update the admission event node information
  $wrapper = entity_metadata_wrapper('node', $node);

  $wrapper->status = 1;
  $wrapper->field_event_detail->set(1);
  $wrapper->field_link_single->url->set((string)$event->WeblinkDetail[104]->URL);

  $event_title = $event->EventTitle;
  $event_desc = $event->EventDescription;
  $event_start = _gsb_cvent_convert_to_UTC($event->EventStartDate);
  $event_end = _gsb_cvent_convert_to_UTC($event->EventEndDate);

  if (isset($session) && $session != NULL) {
    $event_title = $session->ProductName;
    $event_desc = $session->ProductDescription;
    $event_start = _gsb_cvent_convert_to_UTC($session->StartTime);
    $event_end = _gsb_cvent_convert_to_UTC($session->EndTime);
  }

  $wrapper->field_item_id->set((string)$event_id);
  $wrapper->title->set((string)$event_title);
  $wrapper->field_editorial_summary->set((string)$event_desc);

  // Set the event start and end date
  $wrapper->field_event_date[0]->set(array(
    'value' => $event_start,
    'value2' => $event_end,
  ));

  $wrapper->field_time_zone->set('America/Los_Angeles');//(string)$event->Timezone);
  $wrapper->field_program_single->set(10881); // Set it to MBA

  // Set the event category
  $term = taxonomy_get_term_by_name((string)$event->CustomFieldDetail[11]->FieldValue, 'event_category');
  $term = array_values($term);
  $wrapper->field_event_category->set($term);

  // Set the region taxonomy
  $term = taxonomy_get_term_by_name((string)$event->CustomFieldDetail[3]->FieldValue, 'region');
  $term = array_values($term);
  $wrapper->field_region->set($term);

  // Set different event location fields
  $field_collection = $wrapper->field_event_location->raw();

  if(empty($field_collection)) {
    $field_collection_wrapper = _gsb_cvent_create_fc_wrapper('node', $node, 'field_event_location');
  }
  else{
    $field_collection_wrapper = entity_metadata_wrapper('field_collection_item', $wrapper->field_event_location[0]->value());
  }
  $field_collection_wrapper->field_event_location_type->set((string)$event->CustomFieldDetail[0]->FieldValue);

 /*  $field_collection_wrapper->field_address->postal_code->set(0);
  $field_collection_wrapper->field_address->thoroughfare->set('Unknown'); */
  $field_collection_wrapper->field_address->country->set((string)$event->CountryCode);
  $field_collection_wrapper->field_address->locality->set((string)$event->City);
  if ($event->CountryCode == 'US') {
    $field_collection_wrapper->field_address->administrative_area->set((string)$event->StateCode);
  }
  else {
    $field_collection_wrapper->field_address->administrative_area->set((string)$event->State);
  }
  $field_collection_wrapper->save();

  // Finally save the entity
  $wrapper->save();
}

/**
 * Create the field collection wrapper
 */
function _gsb_cvent_create_fc_wrapper($entity_type, $node, $field_collection_name) {
  // Create a field_collection_item entity
  $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_collection_name));

  // Attach it to the node and Wrap it with Entity API
  $field_collection_item->setHostEntity($entity_type, $node);
  $field_collection_wrapper = entity_metadata_wrapper('field_collection_item', $field_collection_item);
  return $field_collection_wrapper;
}

/*
 * Convert to UTC time
 */
function _gsb_cvent_convert_to_UTC($date) {
  $date = new DateObject($date , 'America/Los_Angeles', DATE_FORMAT_ISO);
  date_timezone_set($date, new DateTimeZone('UTC'));
  $date = date_format($date, DATE_FORMAT_DATETIME);
  return $date;
}
