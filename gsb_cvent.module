<?php

/**
 * @file
 * Contains hook implementations and helper functions for GSB Cvent
 */

/**
 * Implementation of hook_menu().
 */
function gsb_cvent_menu() {
  $items = array();
  $items['admin/config/gsb/cvent'] = array(
    'title' => 'GSB Cvent',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_cvent_settings_form'),
    'access arguments' => array('administer cvent'),
    'file' => 'gsb_cvent.admin.inc',
  );

  $items['admin/config/gsb/cvent/import'] = array(
    'title' => 'Start Import',
    'description' => 'GSB Cvent Import.',
    'page callback' => 'gsb_cvent_batch_import',
    'access arguments' => array('administer cvent'),
  );

  $items['cvent_import_id/%'] = array(
    'title' => 'GSB Import.',
    'description' => 'Imports a single event by id',
    'page callback' => 'gsb_cvent_event_import_id',
    'page arguments' => array(1),
    'access arguments' => array('administer cvent'),
  );

  $items['cvent_import_updated'] = array(
    'title' => 'GSB Import Updated.',
    'description' => 'Imports updated events',
    'page callback' => 'gsb_cvent_import_updated',
    'access arguments' => array('administer cvent'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function gsb_cvent_permission() {
  return array(
    'administer cvent' => array(
      'title' => t('Administer cvent'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function gsb_cvent_cron() {
  gsb_cvent_import_updated();
}

/**
 * Login to Cvent API.
 */
function gsb_cvent_login() {
  // Get the library info.
  $library_path = libraries_get_path('php-cvent') . '/CventClient.class.php';
  if (!file_exists($library_path)) {
    drupal_set_message('php-cvent: The CventClient library was not found.', 'error');
    return;
  }
  include_once($library_path);
  $accountnumber = variable_get('gsb_cvent_account_number', $default = NULL);
  $username = variable_get('gsb_cvent_user_name', $default = NULL);
  $password = variable_get('gsb_cvent_password', $default = NULL);

  $client = new CventClient();
  $client->Login($accountnumber, $username, $password);
  if (!$client->CventSessionHeader) {
    watchdog('gsb_cvent', 'Cvent API Login failed!');
  }
  return $client;
}

/**
 * The batch callback.
 */
function gsb_cvent_batch_import() {
  $batch = array(
    'operations' => array(),
    'finished' => 'gsb_cvent_batch_import_finished',
    'title' => t('Cvent Batch Import'),
    'init_message' => t('Import is starting...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Import has encountered an error.')
  );

  $batch['operations'][] = array('gsb_cvent_batch_all_events_import', array("Cvent"));

  batch_set($batch);
  batch_process('admin/content'); // The path to redirect to when done.
}

/**
 * The batch finish handler.
 */
function gsb_cvent_batch_import_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Cvent import is complete!');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/* 
 * Search all events based on condition
 */
function  gsb_cvent_search_events_bycondition($client) {
  $response = $client->SearchByFilter('Event', 'OrSearch', array(
                (object) array('Field' => 'EventStatus', 'Operator' => 'Equals', 'Value' => 'Active'),
                (object) array('Field' => 'EventStatus', 'Operator' => 'Equals', 'Value' => 'Pending'),
                (object) array('Field' => 'EventStatus', 'Operator' => 'Equals', 'Value' => 'Completed'),
                (object) array('Field' => 'EventStatus', 'Operator' => 'Equals', 'Value' => 'Cancelled'),
                (object) array('Field' => 'EventStatus', 'Operator' => 'Equals', 'Value' => 'Closed'),
            ));
  if(isset($response->SearchResult->Id)) return $response->SearchResult->Id;
  return false;
}

/* 
 * Gets upcoming events
 */
function gsb_cvent_batch_all_events_import($options, &$context) {
  $client = gsb_cvent_login();

  $limit = 5;
  if (!isset($context['sandbox']['progress'])) {
    $event_ids = gsb_cvent_search_events_bycondition($client);
    $event_chunks = array_chunk($event_ids, $limit);
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($event_ids);
    $context['sandbox']['event_ids'] = $event_chunks;
    $context['sandbox']['current_chunk'] = 0;
  }

  // Display a progress message...
  $current_chunk = $context['sandbox']['current_chunk'];

  foreach ($context['sandbox']['event_ids'][$current_chunk] as $event_id) {
    $event = $client->GetEventById($event_id);
    // check the event type matches
    $event_type_key = _gsb_cvent_search_key_field('735ECC32-0F5C-4B43-A2CC-C5B56DC003BC', $event->CustomFieldDetail, 'FieldId');
    $cvent_event_types = explode(', ', $event->CustomFieldDetail[$event_type_key]->FieldValue);
    foreach ($cvent_event_types as $cvent_event_type) {
      $event_cat_term = taxonomy_get_term_by_name($cvent_event_type, 'event_category');
      if (!empty($event_cat_term)) {
        // Import all the sessions as event
        gsb_cvent_event_import_id($event_id);
        break;
      }
    }

    $context['sandbox']['progress']++;
  }

  $context['message'] = "Now processed " . $context['sandbox']['progress'] . " out of " . $context['sandbox']['max'] . "..";
  $context['sandbox']['current_chunk']++;

  if ($context['sandbox']['progress'] < $context['sandbox'] ['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/*
 * Import a single event by id
 */
function gsb_cvent_event_import_id($event_id) {
  $client = gsb_cvent_login();
  $event = $client->GetEventById($event_id);
  $show_event_key = _gsb_cvent_search_key_field('2395C729-D21C-41A2-AC51-4BCFBDD5DD78', $event->CustomFieldDetail, 'FieldId');
  // Check if Calendar Event Display is Yes (Show Event on Calendar)
  if ($event->CustomFieldDetail[$show_event_key]->FieldValue == 'Yes') {
    // Use Event related data and import only event
    gsb_cvent_event_import($event);
  }
  else {
    // Loop through all the sessions
    foreach ($event->ProductDetail as $session) {
      // Check if Calendar Session Display is Yes(Show Session on Calendar) and it is a session
      if ($session->ProductType == 'Session' && isset($session->CustomFieldDetail)) {
        $show_session_key = _gsb_cvent_search_key_field('3C0E9C6E-0D0F-4AE1-9456-AD206221BB69', $session->CustomFieldDetail, 'FieldId');
        if ($session->CustomFieldDetail[$show_session_key]->FieldValue == 'Yes') {
          // Use Session related data and Import only session
          gsb_cvent_event_import($event, $session);
        }
      }
    }
  }
  return 'gsb_cvent_event_import_id completed';
}

/**
 * Imports an Event
 */
function gsb_cvent_event_import($event, $session = NULL) {

  $eventid = (!empty($session)) ? $session->ProductId : $event->Id;

  // Check if the event already exists
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'admission_event')
    ->fieldCondition('field_item_id', 'value', (string)$eventid);

  $entities = $query->execute();

  if (!empty($entities['node'])) {
    $nid = array_keys($entities['node']);
    $node = node_load(array_shift($nid));
  }
  else {
    $field_values = array(
      'type' => 'admission_event',
      'uid' => 1,
      'status' => 1,
      'promote' => 0,
    );
    // Create the admission event
    $node = entity_create('node', $field_values);
    $node->workbench_moderation_state_new = workbench_moderation_state_published();
    node_save($node);

    // Set the workbench access
    $node->workbench_access['access_scheme'] = 'taxonomy'; // or 'menu'
    $workbench_section_tid = _gsb_cvent_get_tid_planner($event->PlannerLastName, 'workbench_sections');
    $node->workbench_access = array($workbench_section_tid, 12396); // Set also to Marketing
    workbench_access_node_update($node);
  }

  // update the admission event node information
  $wrapper = entity_metadata_wrapper('node', $node);

  $wrapper->field_event_detail->set(1);
  $program_tid = _gsb_cvent_get_tid_planner($event->PlannerLastName, 'program');
  $wrapper->field_program_single->set($program_tid);

  $wrapper->field_item_id->set((string)$eventid);
  $event_status = $event->EventStatus;
  $event_title = $event->EventTitle;
  $field_editorial_summary = $event->EventDescription;
  $show_event_key = _gsb_cvent_search_key_field('2395C729-D21C-41A2-AC51-4BCFBDD5DD78', $event->CustomFieldDetail, 'FieldId');
  $field_calendar_display = $event->CustomFieldDetail[$show_event_key]->FieldValue;

  // Link logic
  // Default to original link
  $link_key = _gsb_cvent_search_key_field('Event Summary', $event->WeblinkDetail, 'Target');
  $field_link = $event->WeblinkDetail[$link_key]->URL;
  // Check if the 'Event Alternate URL' is not empty
  $link_event_alt_key = _gsb_cvent_search_key_field('09530855-4C9A-47F1-9275-A00DA7DBBF9B', $event->CustomFieldDetail, 'FieldId');
  if (!empty($event->CustomFieldDetail[$link_event_alt_key]->FieldValue)) {
    $field_link = $event->CustomFieldDetail[$link_event_alt_key]->FieldValue;
  }

  // Convert the start and end time to UTC
  $start_time = _gsb_cvent_convert_to_UTC($event->EventStartDate);
  $end_time = _gsb_cvent_convert_to_UTC($event->EventEndDate);

  // Are we importing sessions
  if (!empty($session)) {
    $event_status = $session->Status;
    $event_title = $session->ProductName;
    $show_session_key = _gsb_cvent_search_key_field('3C0E9C6E-0D0F-4AE1-9456-AD206221BB69', $session->CustomFieldDetail, 'FieldId');
    $field_calendar_display = $session->CustomFieldDetail[$show_session_key]->FieldValue;

    // Check if the 'Session Alternate URL' is not empty
    $link_session_alt_key = _gsb_cvent_search_key_field('905225EF-9458-4756-85AC-A499A5B6D11A', $session->CustomFieldDetail, 'FieldId');
    if (!empty($session->CustomFieldDetail[$link_session_alt_key]->FieldValue)) {
      $field_link = $session->CustomFieldDetail[$link_session_alt_key]->FieldValue;
    }

    $start_time = _gsb_cvent_convert_to_UTC($session->StartTime);
    $end_time = NULL;
    if (isset($session->EndTime)) {
      $end_time = _gsb_cvent_convert_to_UTC($session->EndTime);
    }
    // is session description is null
    if (empty($session->ProductDescription)) {
      $field_editorial_summary = $session->ProductDescription;
    }
  }

  // Set all the wrapper values
  $wrapper->field_event_status->set($event_status);
  $wrapper->title->set((string)$event_title);
  $wrapper->field_editorial_summary->set((string)$field_editorial_summary);
  $wrapper->field_calendar_display->set($field_calendar_display);
  $wrapper->field_link_single->url->set((string)$field_link);

  // Set the event start and end date
  $wrapper->field_event_date[0]->set(array(
    'value' => $start_time,
    'value2' => $end_time,
  ));

  // Get drupal timezone from taxonomy mapping
  $timezone_term = taxonomy_get_term_by_name((string)$event->Timezone, 'timezone');
  $timezone_term = array_values($timezone_term);
  if (!empty($timezone_term)) {
    $wrapper->field_time_zone->set($timezone_term[0]->field_drupal_timezone['und'][0]['value']);
  }

  // Set the event category
  $event_type_key = _gsb_cvent_search_key_field('735ECC32-0F5C-4B43-A2CC-C5B56DC003BC', $event->CustomFieldDetail, 'FieldId');
  $cvent_event_types = explode(', ', $event->CustomFieldDetail[$event_type_key]->FieldValue);
  $term_merge = array();
  foreach ($cvent_event_types as $cvent_event_type) {
    $term = taxonomy_get_term_by_name($cvent_event_type, 'event_category');
    $term = array_values($term);
    $term_merge = array_merge($term_merge, $term);
    $wrapper->field_event_category->set($term_merge);
  }

  // Set the region taxonomy
  $region_key = _gsb_cvent_search_key_field('DB07E37F-03C9-446C-87DC-2200312C8F46', $event->CustomFieldDetail, 'FieldId');
  $term = taxonomy_get_term_by_name((string)$event->CustomFieldDetail[$region_key]->FieldValue, 'region');
  $term = array_values($term);
  $wrapper->field_region->set($term);

  // Set different event location fields
  $field_collection = $wrapper->field_event_location->raw();

  if(empty($field_collection)) {
    $field_collection_wrapper = _gsb_cvent_create_fc_wrapper('node', $node, 'field_event_location');
  }
  else{
    $field_collection_wrapper = entity_metadata_wrapper('field_collection_item', $wrapper->field_event_location[0]->value());
  }
  $event_cat_key = _gsb_cvent_search_key_field('18F8FBCC-4B15-4027-8FFC-048A6A25EAB1', $event->CustomFieldDetail, 'FieldId');
  $field_collection_wrapper->field_event_location_type->set((string)$event->CustomFieldDetail[$event_cat_key]->FieldValue);

 /*  $field_collection_wrapper->field_address->postal_code->set(0);
  $field_collection_wrapper->field_address->thoroughfare->set('Unknown'); */
  $field_collection_wrapper->field_address->country->set((string)$event->CountryCode);
  $field_collection_wrapper->field_address->locality->set((string)$event->City);
  if ($event->CountryCode == 'US') {
    $field_collection_wrapper->field_address->administrative_area->set((string)$event->StateCode);
  }
  else {
    $field_collection_wrapper->field_address->administrative_area->set((string)$event->State);
  }
  $field_collection_wrapper->save();

  // Finally save the entity
  $wrapper->save();
}

/**
 * Create the field collection wrapper
 */
function _gsb_cvent_create_fc_wrapper($entity_type, $node, $field_collection_name) {
  // Create a field_collection_item entity
  $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_collection_name));

  // Attach it to the node and Wrap it with Entity API
  $field_collection_item->setHostEntity($entity_type, $node);
  $field_collection_wrapper = entity_metadata_wrapper('field_collection_item', $field_collection_item);
  return $field_collection_wrapper;
}

/*
 * Convert to UTC time
 */
function _gsb_cvent_convert_to_UTC($date) {
  $date = new DateObject($date , 'America/Los_Angeles', DATE_FORMAT_ISO);
  date_timezone_set($date, new DateTimeZone('UTC'));
  $date = date_format($date, DATE_FORMAT_DATETIME);
  return $date;
}

/*
 * Import the updated events used for cron run
 */
function gsb_cvent_import_updated() {
  $client = gsb_cvent_login();

  $start_time = date('Y-m-d').'T00:00:00';
  $end_time = date('Y-m-d').'T11:59:00';
  $event_ids_updated = $client->GetUpdated('Event', $start_time, $end_time);
  if (isset($event_ids_updated->GetUpdatedResult)) {
    foreach ($event_ids_updated->GetUpdatedResult->Id as $event_id) {
      gsb_cvent_event_import_id($event_id);
    }
  }
  return 'Updated events import complete';
}

/**
 * Get the key from event
 */
function _gsb_cvent_search_key_field($fieldId, $event_object, $field) {
  $event_array = json_decode(json_encode($event_object), true);
  $key = array_search($fieldId, array_column($event_array, $field));

  return $key;
}

/**
 * Get the tid from event planner lastname
 */
function _gsb_cvent_get_tid_planner($planner_lastname, $vocab_name) {
  $planner_lastnames = explode(' ', $planner_lastname);
  foreach($planner_lastnames as $planner_lastname) {
    $term = taxonomy_get_term_by_name($planner_lastname, $vocab_name);
    if (!empty($term)) {
      $tid = array_values($term);
      $tids = $tid[0]->tid;
    }
  }
  return $tids;
}
